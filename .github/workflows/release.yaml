name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release Version"
        required: true

jobs:
  build-windows:
    runs-on: ubuntu-latest
    container:
      image: tonioloewald/mxe-base:latest
    environment: release
    env:
      PUB_KEY: ${{ secrets.UID_PUBLIC_KEY_PEM }}
      MXE_TARGET: i686-w64-mingw32.static

    steps:
      - uses: actions/checkout@v4

      - name: Install Python and unzip
        run: |
          apt-get update
          apt-get install -y python3 python3-pip unzip

      - name: Write PUB key into file
        run: echo "$PUB_KEY" > faf_pub.pem

      - name: Build
        run: |
          /usr/bin/${MXE_TARGET}-cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCRYPTOPP_LIBRARIES=/usr/${MXE_TARGET}/lib/libcryptopp.a \
            -DCRYPTOPP_INCLUDE_DIRS=/usr/${MXE_TARGET}/include \
            -DUID_SKIP_LEGACY=On \
            -DUID_PUBKEY_BYTES=$(./encode_openssl_modulus.py $(openssl rsa -noout -inform PEM -in faf_pub.pem -pubin -modulus)) \
            -B build
          make -C build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: faf-uid-windows
          path: build/faf-uid.exe

  build-linux:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    environment: release
    env:
      PUB_KEY: ${{ secrets.UID_PUBLIC_KEY_PEM }}
      JSONCPP_VERSION: 1.7.7
      CRYPTOPP_VERSION: 8_9_0

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            wget \
            unzip \
            python3 \
            python3-pip \
            git \
            curl \
            pkg-config

      - name: Write PUB key into file
        run: echo "$PUB_KEY" > faf_pub.pem

      - name: Build jsoncpp
        run: |
          wget https://github.com/open-source-parsers/jsoncpp/archive/$JSONCPP_VERSION.tar.gz -O jsoncpp.tar.gz
          tar xfz jsoncpp.tar.gz
          cmake \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_SHARED_LIBS=OFF \
            -B jsoncpp-build \
            -S jsoncpp-$JSONCPP_VERSION
          make -C jsoncpp-build

      - name: Build cryptopp
        run: |
          wget https://github.com/weidai11/cryptopp/archive/CRYPTOPP_$CRYPTOPP_VERSION.zip -O cryptopp.zip
          unzip cryptopp.zip
          mv cryptopp-CRYPTOPP_$CRYPTOPP_VERSION cryptopp
          make -C cryptopp -f GNUmakefile CXXFLAGS='-DNDEBUG -O3' libcryptopp.a

      - name: Build
        run: |
          cmake \
            -DJSONCPP_LIBRARIES=$(pwd)/jsoncpp-build/src/lib_json/libjsoncpp.a \
            -DJSONCPP_INCLUDE_DIRS=$(pwd)/jsoncpp-$JSONCPP_VERSION/include \
            -DCRYPTOPP_LIBRARIES=$(pwd)/cryptopp/libcryptopp.a \
            -DCRYPTOPP_INCLUDE_DIRS=$(pwd)/cryptopp \
            -DCMAKE_BUILD_TYPE=MinSizeRel \
            -DUID_PUBKEY_BYTES=$(./encode_openssl_modulus.py $(openssl rsa -noout -inform PEM -in faf_pub.pem -pubin -modulus)) \
            -B build
          make -C build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: faf-uid-linux
          path: build/faf-uid

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: faf-uid-windows
          path: release-artifacts/

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: faf-uid-linux
          path: release-artifacts/

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1.14.0
        with:
          commit: ${{ github.sha }}
          tag: ${{ github.event.inputs.version }}
          draft: true
          prerelease: true
          artifacts: "release-artifacts/*"
